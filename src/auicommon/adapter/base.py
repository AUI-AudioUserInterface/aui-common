from __future__ import annotations
from typing import Protocol, runtime_checkable, Optional, Any
from auicommon.audio.types import PcmAudio, AudioFormat  # bei dir bereits vorhanden
from auicommon.util.async_utils import CancellationToken  # bei dir vorhanden
from .meta import AdapterMeta
from auicommon.input.dtmf import DtmfKey

@runtime_checkable
class AdapterService(Protocol):
    # Metadaten des Services
    def meta(self) -> AdapterMeta: ...

    # Initialize service. Do only one!
    async def init(self, **kwargs: Any) -> None: ...

    # Start/Stop service
    async def start(self) -> None: ...
    async def stop(self) -> None: ...

    # Audio interface
    async def play(self, audio: PcmAudio) -> None: ...
    async def is_playing(self) -> bool: ...
    async def stop_playing(self) -> None: ...

    async def record(self, duration: Optional[float] = 0.0, pcm_settings: Optional[AudioFormat] = AudioFormat(rate=8000)) -> PcmAudio | None: ...
    async def is_recordig(self) -> bool: ...
    async def stop_recording(self) -> None: ...

    # DTMF-Interface
    async def get_dtmf_key(self) -> DtmfKey | None: ...
    async def has_dtmf_key(self) -> bool: ...
    async def flush_dtmf_keys(self) -> None: ...